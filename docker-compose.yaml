services:
  ros2_base:
    image: ros2_i
    container_name: ros2_c
    build:
      # set the build context to the directory containing build files
      context: .
      dockerfile: Dockerfile
    # use the nvidia runtime for GPU access
    runtime: nvidia
    environment:
      # pass the display variable to the container
      - DISPLAY=${DISPLAY}
      # enable NVIDIA GPU access inside the container
      - NVIDIA_DRIVER_CAPABILITIES=all
      - NVIDIA_VISIBLE_DEVICES=all
      # disable qt-X11 memory sharing for RViz
      - QT_X11_NOMITSHM=1
      # load cyclonedds file
      - CYCLONEDDS_URI=file:///root/.ros/cyclonedds.xml
      # use cyclonedds as ros middleware
      - RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
    security_opt:
    # this is set bc of errors with RVIZ being denied dbus comm w/ host
      - apparmor:unconfined
    volumes:
      # mount host directories to the container for persistent storage
      - .:/root/ros2_ws
      # mount the X11 socket to enable graphics display
      - /tmp/.X11-unix:/tmp/.X11-unix
      # add the .Xauthority file to use ssh X11 forwarding - for permissions on a server
      - ${HOME}/.Xauthority:/root/.Xauthority:rw
      # mount cyclondds file
      - ./cyclonedds.xml:/root/.ros/cyclonedds.xml
    # give the container access to the host's network
    network_mode: host
    # enable stdin and tty to allow the user to run bash interactively
    stdin_open: true
    tty: true
    # access all host devices
    privileged: true

    # run the entrypoint script
    entrypoint: /entrypoint.sh
